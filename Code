import copy

import pygame as pg
from pygame.colordict import THECOLORS as COLORS
from random import choice

W_HEIGHT, W_WIDTH = 1000, 1200
FPS = 10
N, M = 100, 100
C_HEIGHT, C_WIDTH = W_HEIGHT / N, W_WIDTH / M

MURDER_C, ALIVE_C = COLORS["black"], COLORS['white']

class Cell(pg.sprite.Sprite):

    def init(self, position, state, i, j):
        super().init()
        self.i = i
        self.j = j
        self.state = state
        self.image = pg.Surface((C_WIDTH-0.1, C_HEIGHT-0.1))
        self.rect  = self.image.get_rect()
        self.rect.topleft = position

    def update(self, field_):
        self.state = field_[self.i][self.j]
        color = MURDER_C
        if self.state == 1:
            color = ALIVE_C

        self.image.fill(color)

    def update_on_neigbours(position_x, position_y, J):
        kolvo = 0
        for x in range(position_x-1, position_x+2):
            for y in range(position_y-1, position_y+2):
                if x == position_x and y == position_y:
                    continue
                if field_[x][y] == 1:
                    kolvo += 1
        if J == 1 and 2 <= kolvo < 4:
            return 1
        if kolvo == 3:
            return 1
        else:
            return 0

pg.init()

main_screen = pg.display.set_mode((W_WIDTH, W_HEIGHT))
main_clock = pg.time.Clock()
field_ = []

field_.append([0 for _ in range(M+2)])
field = pg.sprite.Group()

for i in range(N+1):
    line = [0]
    for j in range(M):
        line.append(choice([0, 1]))

    line.append(0)
    field_.append(line)


for i in range(N):
    for j in range(M):
        field.add(
            Cell(
                position=(C_WIDTH * j, C_HEIGHT * i),
                state=field_[i+1][j+1],
                i=i+1,
                j=j+1
            )
        )

time = 0
is_running = True
while is_running:
    timedelta = main_clock.tick(FPS)
    time += timedelta
    field_2 = copy.deepcopy(field_)
    if time > 1000:
        for i in range(N+1):
            for j in range(M+1):
                J = field_[i][j]
                field_2[i][j] = Cell.update_on_neigbours(i, j, J)

    for event in pg.event.get():
        if event.type == pg.QUIT:
            is_running = False
    field_ = copy.deepcopy(field_2)
    field.update(field_)

    main_screen.fill(COLORS['black'])
    field.draw(main_screen)

    pg.display.flip()

pg.quit()
